# before_all do
#   ensure_git_branch
#   ensure_git_status_clean
#   git_pull
# end

ios_project_path='./ios/loyalty.xcodeproj'
ios_target='loyalty'
ios_staging_target='loyalty-staging'
ios_develop_target='loyalty-develop'
workspace_path='./ios/loyalty.xcworkspace'
bundle_id='loyalty'

# ios platform
platform :ios do
  private_lane :update_version do
      app_store_version = get_app_store_version_number(bundle_id: ios_target)
      plist_version = get_version_number_from_plist(xcodeproj: ios_project_path)
      if Gem::Version.new(plist_version.to_f) == Gem::Version.new(app_store_version.to_f)
          UI.message "bumping minor"
          increment_version_number_in_plist(xcodeproj: ios_project_path, bump_type: 'minor')
      else
          UI.message "bumping patch"
          increment_version_number_in_plist(xcodeproj: ios_project_path, bump_type: 'patch')
      end
  end

  private_lane :staging_build do
      ensure_git_branch(branch: 'staging')
      ensure_git_status_clean
      git_pull
      increment_build_number_in_plist(xcodeproj: ios_project_path, target: ios_staging_target)
      gym(scheme: ios_staging_target, workspace: workspace_path)
  end

  private_lane :release_build do
      ensure_git_branch(branch: 'feature/fastlane')
      ensure_git_status_clean
      git_pull
      increment_build_number_in_plist(xcodeproj: ios_project_path, target: ios_target)
      gym(scheme: ios_target, workspace: workspace_path)
  end

  private_lane :screenshots do
      Dir.chdir('..') do
          # run in parent directory
          sh('detox', 'build -c ios')
          sh('detox', 'test -c ios')
      end
  end

  lane :staging do
      staging_build
      upload_to_testflight(username: 'youremail@gmail.com', app_identifier: 'ReactNativeFastlane')
      commit_version_bump(message: 'bump build')
      push_to_git_remote
  end

  lane :release do
      release_build
      screenshots
      deliver
      commit_version_bump(message: 'bump build')
      push_to_git_remote
  end
end

platform :android do
  desc "Android build and release to beta"
  lane :beta do
      increment_version_code(app_project_dir: './android/app')
      gradle(task: 'clean', project_dir: './android/')
      gradle(task: 'bundle', build_type: 'Release', project_dir: './android')
      supply(track: 'beta', aab: './android/app/build/outputs/bundle/release/app-release.aab')
  end
  lane :release do
      increment_version_code(app_project_dir: './android/app')
      increment_version_name(app_project_dir: './android/app', bump_type: 'patch')
      gradle(task: 'clean', project_dir: './android/')
      gradle(task: 'bundle', build_type: 'Release', project_dir: './android')
      supply(track: 'production', aab: './android/app/build/outputs/bundle/release/app-release.aab', release_status: 'draft')
  end
end

lane :codepush_ios do |options|
  current_version = get_version_number(xcodeproj: ios_project_path, target: 'ReactNativeFastlane')
  codepush(current_version: current_version, manditory: options[:manditory])
end

lane :codepush_android do |options|
  current_version = google_play_track_release_names
  codepush(current_version: current_version, manditory: options[:manditory])
end

private_lane :select_app_version do |options|
  current_version = options[:current_version]
  current_major = [current_version.split(".").first, 'x', 'x'].join('.')
  current_minor = current_version.split('.').slice(0,2).push('x').join('.')
  target_version_label = UI.select("What version do you want to target?", [
      "All users",
      "Most recent major (#{current_major})",
      "Most recent minor (#{current_mior})",
      "Current version (#{current_version})"
  ])

  next "\"*\"" if target_version_label.match(/All/)
  next current_major if target_version_label.match(/major/)
  next current_minor if target_version_label.match(/minor/)

  current_version
end

lane :codepush do |options|
  manditory = !!options[:manditory]
  manditory_string = manditory ? " -m" : ""
  version = select_app_version(current_version: options[:current_version])
  if UI.confirm("Going to CodePush #{version} to production. Feeling lucky punk?")
      Dir.chdir("..") do
          sh "appcenter codepush release-react -a ReactNativeFastlane -d Production -t #{version}#{maditory_string} --output-dir ./build" do |status, result, command|
          unless status.success?
              UI.error "Command #{command} failed with status #{status.exitstatus}"
          end
          UI.message "Finished! Check out the release on App center."
      end
      end
  else
      UI.error "Not going to push"
  end
end